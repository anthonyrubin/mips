.globl main
.globl terminate
#.globl bkpt_1
#.globl bkpt_2
#.globl bkpt_3

.data 0x10000000
number1:  .asciiz "       " #number 1 should be stored here     # 0x10000000
number2:  .asciiz "       " #number 2 should be stored here     # 0x10000008
number3:  .asciiz "       " #number 3 should be stored here     # 0x10000010
prompt1:  .asciiz "Enter first number:"                         # 0x10000018
prompt2:  .asciiz "Enter second number:"                        # 0x1000002C
prompt3:  .asciiz "Enter third number:"                         # 0x10000041


.text


main:
        addi $v0, $0, 4
        lui $a0, 0x1000
        ori $a0, $a0, 0x18
        syscall                # Prompt the user to enter first number (prompt1)

        addi $v0, $0, 8
        lui $a0, 0x1000
        addi $a1, $0, 9
        syscall                # Get first null terminated string
	
        # $a0 currently contains a pointer to the input string
        # ValidateString takes $a0 as the input and output string
        jal ValidateString	# call ValidateString to remove non number characters        

        addi $v0, $0, 4
        syscall

        addi $v0, $0, 4
        lui $a0, 0x1000
        ori $a0, $a0, 0x2C
        syscall                # Prompt the user to enter first number (prompt2)

        addi $v0, $0, 8
        lui $a0, 0x1000
        ori $a0, $a0, 8
        addi $a1, $0, 9
        syscall                # Get second null terminated string
	
	jal ValidateString
	
	addi $v0, $0, 4
	syscall
	
	  addi $v0, $0, 4
        lui $a0, 0x1000
        ori $a0, $a0, 0x41
        syscall                # Prompt the user to enter first number (prompt2)

        addi $v0, $0, 8
        lui $a0, 0x1000
        ori $a0, $a0, 10
        addi $a1, $0, 9
        syscall                # Get second null terminated string
	
	jal ValidateString
	addi $v0, $0, 4
	syscall

	j terminate

terminate:	addi $v0, $0, 10         # Program terminated
		syscall

ValidateString:
        addi    $s1, $0, '0'            # Load ascii 0 into s1
        addi    $s2, $0, '9'            # Load ascci 9 into s2
        add     $t0, $0, $a0            # Copy input string from $a0 into $t0

VSLoopTop:
	lb	$t1, 0($t0)             # Load first character from $t0
        beq     $t1,$zero, VSDone               # Null Check
	#sll     $zero, $zero, 0

        slt     $1, $t1, $s1
        bne     $1, $0, VSInnerLoop
	#sll     $zero, $zero, 0
        #blt    $t1, $s1, VSInnerLoop   # if character < '0' then do the inner loop

        slt     $1, $s2, $t1
        bne     $1, $0, VSInnerLoop
	#sll     $zero, $zero, 0        
#bgt    $t1, $s2, VSInnerLoop   # if character > '9' then do the inner loop

        beq     $0, $0, VSNotNumeral
        #sll $zero, $zero, 0
	#b	VSNotNumeral            # otherwise, this is a valid number character, go to the next character

VSInnerLoop:
		addi    $t2, $t0, 1             # $t2 = $t0 + 1, t2 points at the character after the invalid character
VSInnerLoopTop:
        lb	$t3, 0($t2)             # load the first character from $t2
        beq     $t3,$zero, VSInnerLoopDone	# null check
	#sll     $zero, $zero, 0

        sb	$t3, -1($t2)            # store the character in the previous byte overwriting what was previously there
        addi    $t2, $t2, 1             # increment t2 to the next byte

        beq     $zero, $zero, VSInnerLoopTop
        #sll $zero, $zero, 0
	#b	VSInnerLoopTop          # go back to the top of the inner loop

VSInnerLoopDone:
        sb	$0, -1($t2)             # store a null terminator at the end of the modified string
		addi $t0, $t0, -1

VSNotNumeral:
	addi    $t0, $t0, 1             # increment t0 to move to the next character in our string

        beq     $zero, $zero, VSLoopTop
        #sll $zero, $zero, 0
	#b	VSLoopTop               # go back to the top of the outer loop

VSDone:
       	jr	$ra                     # return
	sll  $zero, $zero, 0

